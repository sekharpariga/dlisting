					Directory Listing Server


This is a simple directory listing server, that serves ls, cd, pwd of directory functions.

	Server is implemented using multi-thread pthread library, to serve multiple clients simulteniously.
server keeps the each accepted client session details in the queue data structure. Client session queue 
cointains each clients socketfd and present working directory as a queue node.


Following are the server directory listing commands and corresponding mapped functions.

commands			function name
ls				lsfun
cd				cdfun


Command implementation detials:
ls:
	when client sends ls  to the server, lsfun checks the pwd of client from queue node and list the 
files under it.


cd:
	when client sends cd  to the server, cdfun first changes server directory to queue->pwd path and then
its tries to change client requested path. If server succeeds to new change client requested relative/obsolute path,
it updates the queue->pwd path. If client asks for wrong path it, server replies to the client as wrong input.

pwd:
	When client first connects to the server, client session queue->pwd will have servers running directory path.
so, whenever client send pwd, server sends the queue->pwd buffer.

bye:
	When client sends bye, server closes the client connection by removing the client session queue node.


Queue data structure details:
	typedef struct node 
	{
	        int *client_socket;
	        char pwd[PATHMAX];
	        struct node *next;
	} node_t;

	node *head, *tail;
	void enqueue(int *client_socket, char *pwd);
	node_t *dequeue();

enqueue:
	when client successfully connects to server, this function creates the above queue node into the queue.

dequeue:
	when client sends "bye", server removes the clients queue node and closes the client connection.


Multi-threading:
	when server successfully starts, it will create thread pool of max THREADPOOL threads.
server uses pthread mutex lock to syn operations on adjusting session queue data.


Instructions to build:
tools required : gcc and make

root@kali:~/dlisting# make all
gcc -g -Wall -Wextra -pedantic  -c common.c -o common.o
gcc -g -Wall -Wextra -pedantic  -c queue.c -o queue.o
gcc -g -Wall -Wextra -pedantic  server.c common.o queue.o -o server.o -lpthread
gcc -g -Wall -Wextra -pedantic  client.c -o client.o


commands output:

root@kali:~/dlisting# ./server.o 
new conn:4
closed conn:4


root@kali:~/dlisting# ./client.o 
pwd
/root/dlisting

ls
file	queue.o	Sun Aug 16 23:47:54 2020
file	server.o	Sun Aug 16 23:47:54 2020
file	makefile	Wed Aug 12 04:57:01 2020
file	queue.h	Tue Aug 11 06:34:43 2020
dir	ccc	Sun Aug  9 12:11:53 2020
file	server.c	Tue Aug 11 09:18:50 2020
file	common.c	Sun Aug 16 15:05:27 2020
file	client.c	Sun Aug 16 15:06:50 2020
file	queue.c	Tue Aug 11 08:11:20 2020
file	common.h	Sun Aug 16 15:00:01 2020
file	common.o	Sun Aug 16 23:47:54 2020
file	README	Tue Aug 11 06:35:01 2020
file	.gitignore	Sat Aug  8 17:06:34 2020
file	client.o	Sun Aug 16 23:47:54 2020
dir	.git	Sun Aug 16 15:14:36 2020


cd ..
 
pwd
/root/dlisting

bye
root@kali:~/dlisting#

Limitations:
1. ls buffer size is of 1400 chars
2. pwd path max buffer size is 1400 chars

Assumptions:
1. due to not having file birth_date<created date> used the 

Linux distribution used : 
Distributor ID:	Kali
Description:	Kali GNU/Linux Rolling
Release:		2020.3

gcc version 9.3.0 (Debian 9.3.0-15) 

buffer & THREADPOOL configuration file common.h

current settings:
buffer size 1400 chars
THREADPOOL 10 threads
PATHMAX 1400 chars
server port 54321
