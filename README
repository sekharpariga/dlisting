					Directory Listing Server


This is a simple directory listing server, that serves ls, cd, pwd of directory functions.

	Server is implemented using multi-thread pthread library, to serve multiple clients simulteniously.
server keeps the each accepted client session details in the queue data structure. Client session queue 
cointains each clients socketfd and present working directory as a queue node.


Following are the server directory listing commands and corresponding mapped functions.

commands			function name
ls				lsfun
cd				cdfun


Command implementation detials:
ls:
	when client sends ls  to the server, lsfun checks the pwd of client from queue node and list the 
files under it.


cd:
	when client sends cd  to the server, cdfun first changes server directory to queue->pwd path and then
its tries to change client requested path. If server succeeds to new change client requested relative/obsolute path,
it updates the queue->pwd path. If client asks for wrong path it, server replies to the client as wrong input.

pwd:
	When client first connects to the server, client session queue->pwd will have servers running directory path.
so, whenever client send pwd, server sends the queue->pwd buffer.

bye:
	When client sends bye, server closes the client connection by removing the client session queue node.


Queue data structure details:
	typedef struct node 
	{
	        int *client_socket;
	        char pwd[PATH_MAX];
	        struct node *next;
	} node_t;

	node *head, *tail;
	void enqueue(int *client_socket, char *pwd);
	node_t *dequeue();

enqueue:
	when client successfully connects to server, this function creates the above queue node into the queue.

dequeue:
	when client sends "bye", server removes the clients queue node and closes the client connection.


Multi-threading:
	when server successfully starts, it will create thread pool of max THREADPOOL threads.
server uses pthread mutex lock to syn operations on adjusting session queue data.


Instructions to build:
tools required : gcc and make

root@kali:~/dlisting# make all
gcc -c lsfun.c -o lsfun.o
gcc -c request.c -o request.o
gcc -c queue.c -o queue.o
gcc -g -Wall -Wextra -pedantic  server.c lsfun.o request.o queue.o -o server.o -lpthread
gcc -g -Wall -Wextra -pedantic   client.c -o client.o


commands output:

root@kali:~/dlisting# ./server.o 
new conn:4
closed conn:4


root@kali:~/dlisting# ./client.o 
pwd
/root/dlisting

ls
file	queue.o		Fri Aug  7 11:38:56 2020
file	request.c		Thu Aug  6 15:39:48 2020
file	server.o		Fri Aug  7 11:38:56 2020
file	singleserver.c		Thu Aug  6 15:39:48 2020
file	makefile		Thu Aug  6 15:39:48 2020
file	lsfun.c		Thu Aug  6 16:05:34 2020
file	queue.h		Thu Aug  6 15:39:48 2020
file	request.o		Fri Aug  7 11:38:56 2020
file	lsfun.o		Fri Aug  7 11:38:56 2020
file	server.c		Thu Aug  6 16:59:06 2020
file	TODO		Thu Aug  6 15:39:48 2020
file	client.c		Thu Aug  6 16:48:23 2020
file	queue.c		Thu Aug  6 15:39:48 2020
file	request.h		Thu Aug  6 15:39:48 2020
file	test.c		Thu Aug  6 15:39:48 2020
file	common.h		Thu Aug  6 15:39:48 2020
file	README		Thu Aug  6 15:44:12 2020
file	.gitignore		Thu Aug  6 15:39:48 2020
file	lsfun.h		Thu Aug  6 15:39:48 2020
file	client.o		Fri Aug  7 11:38:56 2020
file	README.md		Thu Aug  6 15:39:48 2020
dir 	.git		Fri Aug  7 11:36:45 2020


cd ..
 
pwd
/root

bye
root@kali:~/dlisting#

Limitations:
1. ls buffer size is of 4096 chars
2. pwd path max buffer size is 4096 chars

Assumptions:
1. due to not having file birth_date<created date> used the 

Linux distribution used : 
Distributor ID:	Kali
Description:	Kali GNU/Linux Rolling
Release:		2020.3

gcc version 9.3.0 (Debian 9.3.0-15) 


